{
	"compiler": {
		"version": "0.8.11+commit.d7f03943"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"custom:oz-upgrades-unsafe-allow": "constructor constructor() initializer {} ``` ====",
			"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed: [.hljs-theme-light.nopadding] ```",
			"kind": "dev",
			"methods": {},
			"stateVariables": {
				"_initialized": {
					"details": "Indicates that the contract has been initialized."
				},
				"_initializing": {
					"details": "Indicates that the contract is in the process of being initialized."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Initializable.sol": "Initializable"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/AddressUpgradeable.sol": {
			"keccak256": "0x3248dd7276ab0974d87e44c713352ad1dae4fe1b883ceb2c3804b2ddada8199b",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f3172b894cf94b31086664632a55753e8b0dc1bbeb395ed5a090a915832e7a2",
				"dweb:/ipfs/QmaWow4gDfQhYWapUHHxDpVTB7CwfkYqkAJhCpgDR4mdEC"
			]
		},
		"contracts/Initializable.sol": {
			"keccak256": "0xe1267bd99e446653260ddfb801ba1a9b094b864b57f7235d88f4a3ba5ab53cf8",
			"license": "MIT",
			"urls": [
				"bzz-raw://8bcdc267c81dcdec1cdc96834a18520a7f8f8fdb33ea2fc6ba2ecde7fdaf6331",
				"dweb:/ipfs/QmZ6moCdC2skQS6ZEaX9pF98ScwZu1XqLHUsBaN3oyz9UQ"
			]
		}
	},
	"version": 1
}