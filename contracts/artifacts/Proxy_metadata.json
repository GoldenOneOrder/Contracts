{
	"compiler": {
		"version": "0.8.11+commit.d7f03943"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/TransparentUpgradableProxy.sol": "Proxy"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/TransparentUpgradableProxy.sol": {
			"keccak256": "0x69e89c0d3b863c89ed4441a53d130af2912e05e9a81a8f595edd60a36ce97bbf",
			"license": "MIT",
			"urls": [
				"bzz-raw://7ea28ed44b420aa64b0c9894fb47bcf7fac76a5d96f5887bc2eb3ecb966ad65c",
				"dweb:/ipfs/QmcF8wAQ2icmHMGRfrMs2c25C6oYCxVkF9NzM1o75o2Z1t"
			]
		}
	},
	"version": 1
}